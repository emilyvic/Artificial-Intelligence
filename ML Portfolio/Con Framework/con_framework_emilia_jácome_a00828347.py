# -*- coding: utf-8 -*-
"""Con Framework - Emilia_Jácome-A00828347.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ucEgN-YAAssPGy2eJw1gXxcQlkAERKiZ

Emilia Victoria Jácome Iñiguez

A00828347

**MOMENTO DE RETROALIMENTACIÓN: IMPLEMENTACIÓN DE UNA TÉCNICA DE APRENDIZAJE MÁQUINA SIN EL USO DE UN FRAMEWORK**

#***Preliminar***

##***Conexión a Drive***
"""

from google.colab import drive
drive.mount('/content/drive')

cd /content/drive/MyDrive/Inteligencia Artificial Avanzada/ML/DataSets

"""##***Cargar los datos a data frames***"""

import pandas as pd
#columns = ["fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol", "quality"]
df = pd.read_csv('stroke_data.csv') #generar el dataframe con los datos de wine

df

df.columns

df.describe()

"""# **Exploración de los Datos**

###***Ver tipo de Datos***
"""

df.info()

"""###***Convertir el tipo de dato de Stroke a object***"""

df.astype({"stroke": object}).dtypes

"""### ***Columna que se va a predecir: Stroke***"""

df.groupby('stroke').size()

df.groupby('stroke').hist(figsize=(20, 10))

import matplotlib.pyplot as plt
import seaborn as sns

"""###***Matriz de Correlación***"""

plt.figure(figsize = (10,8))
sns.heatmap(pd.DataFrame(df).corr(), annot=True)
plt.title('Correlation of Variables')
plt.show()

"""#**Preparación**

##*Seleccionar las variables que se van a analizar*

Las variables independientes (x) serán: 
* *gender:* género de la persona
* *age:* la edad de la persona
* *hypertension:* si el paciente sufre de hipertensión o no
* *heart_disease:* si el paciente tiene enfermedades cardiácas o no
* *ever_married:* si el paciente está casado o no.
* *work_type:* a qué se dedica profesionalmente el paciente en su vida cotidiana
* *Residence_type:* en donde reside el paciente
* *avg_glucose_level:* el promedio del nivel de glucosa en la sangre del paciente
* *smoking_status:* si el paciente fuma actualmente o no
* *bmi:* el índice de masa corporal del paciente

las variables independientes declaradas enteriormente en una muestra de 4981 pacientes.

La variable dependiente (y) que se va a predecir será: *smoke:*
* 1: Si tendrá un infarto
* 0: Si no tendrá un infarto

## *Tokenización de Variables categóricas*

Columna de gender
"""

df["gender_tok"] = 0
df.loc[df['gender'] == 'Female', 'gender_tok'] = 1

"""Columna de ever_married"""

df["ever_married_tok"] = 0
df.loc[df['ever_married'] == 'Yes', 'ever_married_tok'] = 1

"""Columna de work_type"""

df["work_type_tok"] = 0
df.loc[df['work_type'] == 'Never_worked', 'work_type_tok'] = 0
df.loc[df['work_type'] == 'Private', 'work_type_tok'] = 1
df.loc[df['work_type'] == 'Govt_jov', 'work_type_tok'] = 2
df.loc[df['work_type'] == 'Self-employed', 'work_type_tok'] = 3
df.loc[df['work_type'] == 'children', 'work_type_tok'] = 4

"""Columna de Residence-type"""

df["residence_type_tok"] = 0
df.loc[df['Residence_type'] == 'Rural', 'residence_type_tok'] = 1

"""Columna de smoking_status"""

df["smoking_status_tok"] = 0
df.loc[df['smoking_status'] == 'never smoked', 'smoking_status_tok'] = 0
df.loc[df['smoking_status'] == 'formerly smoked', 'smoking_status_tok'] = 1
df.loc[df['smoking_status'] == 'Unknown', 'smoking_status_tok'] = 2
df.loc[df['smoking_status'] == 'smokes', 'smoking_status_tok'] = 4

df

feature_names = ['gender_tok', 'age', 'hypertension', 'heart_disease', 'ever_married_tok', 'work_type_tok', 'residence_type_tok', 'avg_glucose_level', 'bmi', 'smoking_status_tok']
X = df[feature_names]
y = df.stroke

"""## *Separación de las variables en conjunto de entrenamiento y prueba*"""

# split X and y into training and testing sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, stratify = df.stroke, train_size = 0.6, test_size = 0.4, random_state=6)

"""# **Selección del Modelo de ML**

##***Árbol de Desición con Entropía***
"""

from sklearn import tree

"""###Entrenamiento"""

myTree_1 = tree.DecisionTreeClassifier(criterion="entropy", splitter="random")
myTree_1.fit(X_train,y_train)

"""###Visualización del Árbol de Desición"""

#print(tree.export_text(myTree_1))

#tree.plot_tree(myTree_1)

"""Cambiar la apariencia del Árbol de Desición"""

import graphviz
feature_names = ['Género', 'Edad', 'Hipertensión', 'Enferm Cardiacas', 'Casado', 'Tipo Trabajo', 'Tipo Residencia', 'Clucosa Promedio', 'Índice Masa Corporal', 'Fuma'] #Colocar el nombre de las características
myTreeData = tree.export_graphviz(myTree_1, feature_names=feature_names)
graphData = graphviz.Source(myTreeData)
graphData

class_names = ['1','2', "3", "4", "5", "6", "7", "8", "9", "10"]
myTreeData = tree.export_graphviz(myTree_1,feature_names=feature_names,
class_names=class_names, leaves_parallel=True,
filled=True, proportion=True)
graphData = graphviz.Source(myTreeData)
graphData

"""###*Imprimir Predicciones*
Se corren 250 predicciones para validar la salida del modelo con la columna de "compare"
"""

y_pred_myTree_1 = myTree_1.predict(X_test)

# print the first 50 true and predicted responses
df_pred1 = pd.DataFrame(X_test[0:250])
df_pred1["real stroke"] = y_test.values[0:250]
df_pred1["pred stroke"] = y_pred_myTree_1[0:250]

df_pred1["compare"]  =  "FALSE"

df_pred1.loc[df_pred1['real stroke'] == df_pred1['pred stroke'], 'compare'] = "TRUE"
df_pred1

df_pred1.groupby(['compare']).size()

"""##***Árbol de Desición con Gini***

### *Entrenamiento*
"""

myTree_2 = tree.DecisionTreeClassifier(criterion="gini")
myTree_2.fit(X_train,y_train)

"""###*Visualización del Árbol de Desición*"""

import graphviz
feature_names = ['Género', 'Edad', 'Hipertensión', 'Enferm Cardiacas', 'Casado', 'Tipo Trabajo', 'Tipo Residencia', 'Clucosa Promedio', 'Índice Masa Corporal', 'Fuma'] #Colocar el nombre de las características
myTreeData = tree.export_graphviz(myTree_2, feature_names=feature_names)
graphData = graphviz.Source(myTreeData)
graphData

class_names = ['1','2', "3", "4", "5", "6", "7", "8", "9", "10"]
myTreeData = tree.export_graphviz(myTree_2,feature_names=feature_names,
class_names=class_names, leaves_parallel=True,
filled=True, proportion=True, rotate=True)
graphData = graphviz.Source(myTreeData)
graphData

"""###*Imprimir Predicciones*
Se corren 250 predicciones para validar la salida del modelo con la columna de "compare"
"""

y_pred_myTree_2 = myTree_2.predict(X_test)

# print the first 50 true and predicted responses
df_pred2 = pd.DataFrame()
df_pred2 = pd.DataFrame(X_test[0:250])
df_pred2["real stroke"] = y_test.values[0:250]
df_pred2["pred stroke"] = y_pred_myTree_2[0:250]

df_pred2["compare"]  =  "FALSE"

df_pred2.loc[df_pred2['real stroke'] == df_pred2['pred stroke'], 'compare'] = "TRUE"
df_pred2

df_pred2.groupby(['compare']).size()

"""#***Validación***

##*Matriz de Confusión*
"""

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(y_test,y_pred_myTree_1))
print(classification_report(y_test,y_pred_myTree_1))

print(confusion_matrix(y_test,y_pred_myTree_2))
print(classification_report(y_test,y_pred_myTree_2))